import { allPosts } from "contentlayer/generated";
import { notFound } from "next/navigation";

import "@/styles/mdx.css";

import type { MDXComponents } from "mdx/types";
import type { Metadata } from "next";
import Link from "next/link";
import Author from "@/components/content/author";
import BlurImage from "@/components/shared/blur-image";
import MaxWidthWrapper from "@/components/shared/max-width-wrapper";
import { DashboardTableOfContents } from "@/components/shared/toc";
import { buttonVariants } from "@/components/ui/button";
import { BLOG_CATEGORIES } from "@/config/blog";
import { getTableOfContents } from "@/lib/toc";
import {
  cn,
  constructMetadata,
  formatDate,
  getBlurDataURL,
  placeholderBlurhash,
} from "@/lib/utils";

export async function generateStaticParams() {
  return allPosts.map((post) => ({
    slug: post.slugAsParams,
  }));
}

export async function generateMetadata({
  params,
}: {
  params: Promise<{ slug: string }>;
}): Promise<Metadata | undefined> {
  const { slug } = await params;
  const post = allPosts.find((post) => post.slugAsParams === slug);
  if (!post) {
    return;
  }

  const { title, description, date, authors } = post;

  // Dynamic OG image generated by Route Handler
  // Use type="article" for blog posts with publishedTime and authors
  return constructMetadata({
    title: `${title} – qodio`,
    description: description,
    image: `/api/og/articles/${slug}`,
    canonical: `/articles/${slug}`,
    type: "article",
    publishedTime: new Date(date).toISOString(),
    authors: authors,
  });
}

export default async function PostPage({
  params,
}: {
  params: Promise<{
    slug: string;
  }>;
}) {
  const { slug } = await params;
  const post = allPosts.find((post) => post.slugAsParams === slug);

  if (!post) {
    notFound();
  }

  // 複数のカテゴリーに対応
  const categories = post.categories
    .map((categorySlug) =>
      BLOG_CATEGORIES.find((category) => category.slug === categorySlug),
    )
    .filter((category) => category !== undefined);

  const relatedArticles =
    post.related
      ?.map((slug) => allPosts.find((post) => post.slugAsParams === slug))
      .filter((post) => post !== undefined) || [];

  const toc = await getTableOfContents(post.body.raw);

  const [thumbnailBlurhash, images] = await Promise.all([
    getBlurDataURL(post.image),
    await Promise.all(
      post.images.map(async (src: string) => ({
        src,
        blurDataURL: await getBlurDataURL(src),
      })),
    ),
  ]);

  // @next/mdx を使用して MDX ファイルを動的にインポート
  const { default: MDXContent } = await import(
    `@/content/articles/${slug}.mdx`
  );

  // 画像付き MDX コンポーネントを作成
  interface MDXImageProps {
    src?: string;
    alt?: string;
    className?: string;
    width?: string | number;
    height?: string | number;
  }

  const mdxComponents: MDXComponents = {
    Image: (props: MDXImageProps) => {
      if (!images || !props.src) return null;
      const blurDataURL = images.find(
        (image: { src: string; blurDataURL?: string }) => image.src === props.src,
      )?.blurDataURL;

      const imgWidth =
        typeof props.width === "string"
          ? parseInt(props.width, 10) || 800
          : props.width || 800;
      const imgHeight =
        typeof props.height === "string"
          ? parseInt(props.height, 10) || 400
          : props.height || 400;

      return (
        <div className="mt-5 w-full overflow-hidden rounded-lg border">
          <BlurImage
            src={props.src}
            alt={props.alt || `${post.title}に関する画像`}
            width={imgWidth}
            height={imgHeight}
            blurDataURL={blurDataURL}
            className={cn(
              "size-full object-cover object-center",
              props.className,
            )}
          />
        </div>
      );
    },
  };

  // JSON-LD structured data for Article
  const jsonLd = {
    "@context": "https://schema.org",
    "@type": "Article",
    headline: post.title,
    description: post.description,
    image: `${constructMetadata().metadataBase}${post.image}`,
    datePublished: post.date,
    author: post.authors.map((author) => ({
      "@type": "Person",
      name: author,
    })),
    publisher: {
      "@type": "Organization",
      name: "qodio コーディオ",
      logo: {
        "@type": "ImageObject",
        url: `${constructMetadata().metadataBase}/_static/logo-light.png`,
      },
    },
  };

  return (
    <>
      {/* JSON-LD structured data */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd).replace(/</g, '\u003c') }}
      />
      <MaxWidthWrapper className="pt-6 md:pt-10">
        <div className="flex flex-col space-y-4">
          <time
            dateTime={post.date}
            className="text-sm font-medium text-muted-foreground"
          >
            {formatDate(post.date)}
          </time>
          <div className="flex items-center flex-wrap gap-2">
            {categories.map((category) => (
              <Link
                key={category.slug}
                href={`/articles/category/${category.slug}`}
                className={cn(
                  buttonVariants({
                    variant: "outline",
                    size: "sm",
                  }),
                  "h-8",
                )}
              >
                {category.title}
              </Link>
            ))}
          </div>
          <h1 className="font-heading text-3xl text-foreground sm:text-4xl font-bold">
            {post.title}
          </h1>
          <p className="text-base text-muted-foreground md:text-lg">
            {post.description}
          </p>
          <div className="flex flex-nowrap items-center space-x-5 pt-1 md:space-x-8">
            {post.authors.map((author) => (
              <Author username={author} key={post._id + author} />
            ))}
          </div>
        </div>
      </MaxWidthWrapper>

      <div className="relative">
        <div className="absolute top-52 w-full border-t" />

        <MaxWidthWrapper className="grid grid-cols-4 gap-10 pt-8 max-md:px-0">
          <div className="relative col-span-4 mb-10 flex flex-col space-y-8 border-y bg-background md:rounded-xl md:border lg:col-span-3">
            <BlurImage
              alt={post.title}
              blurDataURL={thumbnailBlurhash ?? placeholderBlurhash}
              className="aspect-[1200/630] border-b object-cover md:rounded-t-xl"
              width={1200}
              height={630}
              priority
              placeholder="blur"
              src={post.image}
              sizes="(max-width: 768px) 770px, 1000px"
            />
            <div className="px-[.8rem] pb-10 md:px-8">
              <div className="mdx">
                <MDXContent components={mdxComponents} />
              </div>
            </div>
          </div>

          <div className="sticky top-20 col-span-1 mt-52 hidden flex-col divide-y divide-muted self-start pb-24 lg:flex">
            <DashboardTableOfContents toc={toc} />
          </div>
        </MaxWidthWrapper>
      </div>

      <MaxWidthWrapper>
        {relatedArticles.length > 0 && (
          <div className="flex flex-col space-y-4 pb-16">
            <p className="font-heading text-2xl text-foreground">
              More Articles
            </p>

            <div className="grid grid-cols-1 gap-3 md:grid-cols-2 lg:gap-6">
              {relatedArticles.map((post) => (
                <Link
                  key={post.slug}
                  href={post.slug}
                  className="flex flex-col space-y-2 rounded-xl border p-5 transition-colors duration-300 hover:bg-muted/80"
                >
                  <h3 className="font-heading text-xl text-foreground">
                    {post.title}
                  </h3>
                  <p className="line-clamp-2 text-[15px] text-muted-foreground">
                    {post.description}
                  </p>
                  <p className="text-sm text-muted-foreground">
                    {formatDate(post.date)}
                  </p>
                </Link>
              ))}
            </div>
          </div>
        )}
      </MaxWidthWrapper>
    </>
  );
}
