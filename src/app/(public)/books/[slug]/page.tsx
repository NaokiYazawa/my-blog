import { allBooks, allChapters } from "contentlayer/generated";
import type { Metadata } from "next";
import { notFound } from "next/navigation";
import { BookDetail } from "@/components/content/book-detail";
import { constructMetadata, getBlurDataURL } from "@/lib/utils";

export async function generateStaticParams() {
  return allBooks.map((book) => ({
    slug: book.bookSlug,
  }));
}

export async function generateMetadata({
  params,
}: {
  params: Promise<{ slug: string }>;
}): Promise<Metadata | undefined> {
  const { slug } = await params;
  const book = allBooks.find((book) => book.bookSlug === slug);
  if (!book) {
    return;
  }

  // Dynamic OG image generated by Route Handler
  return constructMetadata({
    title: `${book.title} – qodio`,
    description: book.description,
    image: `/api/og/books/${slug}`,
    canonical: `/books/${slug}`,
  });
}

export default async function BookPage({
  params,
}: {
  params: Promise<{
    slug: string;
  }>;
}) {
  const { slug } = await params;
  const book = allBooks.find((book) => book.bookSlug === slug);

  if (!book) {
    notFound();
  }

  const chapters = allChapters
    .filter((chapter) => chapter.bookSlug === slug && chapter.published)
    .sort((a, b) => a.order - b.order);

  const bookWithBlur = {
    ...book,
    blurDataURL: await getBlurDataURL(book.image),
  };

  // JSON-LD structured data for Book
  const jsonLd = {
    "@context": "https://schema.org",
    "@type": "Book",
    name: book.title,
    description: book.description,
    image: `${constructMetadata().metadataBase}${book.image}`,
    datePublished: book.publishDate,
    author: book.authors.map((author) => ({
      "@type": "Person",
      name: author,
    })),
    publisher: {
      "@type": "Organization",
      name: "qodio コーディオ",
    },
    numberOfPages: chapters.length,
  };

  return (
    <>
      {/* JSON-LD structured data */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd).replace(/</g, '\u003c') }}
      />
      <BookDetail book={bookWithBlur} chapters={chapters} />
    </>
  );
}
