import { allBooks, allChapters } from "contentlayer/generated";
import { notFound } from "next/navigation";

import "@/styles/mdx.css";

import type { MDXComponents } from "mdx/types";
import type { Metadata } from "next";
import Link from "next/link";
import BlurImage from "@/components/shared/blur-image";
import MaxWidthWrapper from "@/components/shared/max-width-wrapper";
import { DashboardTableOfContents } from "@/components/shared/toc";
import { buttonVariants } from "@/components/ui/button";
import { siteConfig } from "@/config/site";
import { getTableOfContents } from "@/lib/toc";
import { cn, constructMetadata, getBlurDataURL } from "@/lib/utils";

export async function generateStaticParams() {
  return allChapters.map((chapter) => ({
    slug: chapter.bookSlug,
    chapter: chapter.chapterSlug,
  }));
}

export async function generateMetadata({
  params,
}: {
  params: Promise<{ slug: string; chapter: string }>;
}): Promise<Metadata | undefined> {
  const { slug, chapter: chapterSlug } = await params;
  const chapter = allChapters.find(
    (ch) => ch.bookSlug === slug && ch.chapterSlug === chapterSlug,
  );
  if (!chapter) {
    return;
  }

  const book = allBooks.find((book) => book.bookSlug === slug);
  const { title, description } = chapter;

  // Dynamic OG image generated by Route Handler
  return constructMetadata({
    title: `${title} – ${book?.title || "Book"} – qodio`,
    description: description || `${title} chapter from ${book?.title}`,
    image: `/api/og/books/${slug}/${chapterSlug}`,
    canonical: `/books/${slug}/${chapterSlug}`,
  });
}

export default async function ChapterPage({
  params,
}: {
  params: Promise<{
    slug: string;
    chapter: string;
  }>;
}) {
  const { slug, chapter: chapterSlug } = await params;
  const chapter = allChapters.find(
    (ch) => ch.bookSlug === slug && ch.chapterSlug === chapterSlug,
  );

  if (!chapter) {
    notFound();
  }

  const book = allBooks.find((book) => book.bookSlug === slug);

  const allBookChapters = allChapters
    .filter((ch) => ch.bookSlug === slug && ch.published)
    .sort((a, b) => a.order - b.order);

  const currentIndex = allBookChapters.findIndex(
    (ch) => ch.chapterSlug === chapterSlug,
  );

  const previousChapter =
    currentIndex > 0 ? allBookChapters[currentIndex - 1] : null;
  const nextChapter =
    currentIndex < allBookChapters.length - 1
      ? allBookChapters[currentIndex + 1]
      : null;

  const toc = await getTableOfContents(chapter.body.raw);

  const images = await Promise.all(
    chapter.images.map(async (src: string) => {
      return {
        src,
        blurDataURL: await getBlurDataURL(src),
      };
    }),
  );

  // @next/mdx を使用して MDX ファイルを動的にインポート
  const { default: MDXContent } = await import(
    `@/content/books/${slug}/chapters/${chapterSlug}.mdx`
  );

  // 画像付き MDX コンポーネントを作成
  interface MDXImageProps {
    src?: string;
    alt?: string;
    className?: string;
    width?: string | number;
    height?: string | number;
  }

  const mdxComponents: MDXComponents = {
    Image: (props: MDXImageProps) => {
      if (!images || !props.src) return null;
      const blurDataURL = images.find(
        (image: { src: string; blurDataURL?: string }) => image.src === props.src,
      )?.blurDataURL;

      const imgWidth =
        typeof props.width === "string"
          ? parseInt(props.width, 10) || 800
          : props.width || 800;
      const imgHeight =
        typeof props.height === "string"
          ? parseInt(props.height, 10) || 400
          : props.height || 400;

      return (
        <div className="mt-5 w-full overflow-hidden rounded-lg border">
          <BlurImage
            src={props.src}
            alt={props.alt || `${chapter.title}に関する画像`}
            width={imgWidth}
            height={imgHeight}
            blurDataURL={blurDataURL}
            className={cn(
              "size-full object-cover object-center",
              props.className,
            )}
          />
        </div>
      );
    },
  };

  // JSON-LD structured data for Chapter
  const chapterJsonLd = {
    "@context": "https://schema.org",
    "@type": "Chapter",
    name: chapter.title,
    description: chapter.description,
    position: chapter.order,
    isPartOf: {
      "@type": "Book",
      name: book?.title,
      url: `${siteConfig.url}/books/${slug}`,
    },
  };

  // JSON-LD structured data for Breadcrumb
  const breadcrumbJsonLd = {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    itemListElement: [
      {
        "@type": "ListItem",
        position: 1,
        name: "Home",
        item: siteConfig.url,
      },
      {
        "@type": "ListItem",
        position: 2,
        name: "Books",
        item: `${siteConfig.url}/books`,
      },
      {
        "@type": "ListItem",
        position: 3,
        name: book?.title,
        item: `${siteConfig.url}/books/${slug}`,
      },
      {
        "@type": "ListItem",
        position: 4,
        name: chapter.title,
      },
    ],
  };

  return (
    <>
      {/* JSON-LD structured data for Chapter */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: JSON.stringify(chapterJsonLd).replace(/</g, '\u003c') }}
      />
      {/* JSON-LD structured data for Breadcrumb */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbJsonLd).replace(/</g, '\u003c') }}
      />
      <MaxWidthWrapper className="pt-6 md:pt-10">
        <div className="flex flex-col space-y-4">
          <div className="flex items-center space-x-4">
            {book && (
              <Link
                href={`/books/${book.bookSlug}`}
                className={cn(
                  buttonVariants({
                    variant: "outline",
                    size: "sm",
                  }),
                  "h-8 whitespace-nowrap",
                )}
              >
                {book.title}
              </Link>
            )}
          </div>
          <div className="flex items-center space-x-4">
            <span className="text-sm font-medium text-muted-foreground whitespace-nowrap">
              Chapter {chapter.order} of {allBookChapters.length}
            </span>
            <div className="flex items-center space-x-2">
              <div
                className="h-1 w-16 rounded-full bg-muted md:w-20"
                role="progressbar"
                aria-valuenow={Math.round(
                  (chapter.order / allBookChapters.length) * 100,
                )}
                aria-valuemin={0}
                aria-valuemax={100}
                aria-label={`Reading progress: ${chapter.order} of ${allBookChapters.length} chapters`}
              >
                <div
                  className="h-1 rounded-full bg-primary transition-all duration-300"
                  style={{
                    width: `${(chapter.order / allBookChapters.length) * 100}%`,
                  }}
                />
              </div>
              <span className="text-xs text-muted-foreground">
                {Math.round((chapter.order / allBookChapters.length) * 100)}%
              </span>
            </div>
          </div>
          <h1 className="font-heading text-3xl text-foreground sm:text-4xl font-bold">
            {chapter.title}
          </h1>
          {chapter.description && (
            <p className="text-base text-muted-foreground md:text-lg">
              {chapter.description}
            </p>
          )}
        </div>
      </MaxWidthWrapper>

      <div className="relative">
        <div className="absolute top-52 w-full border-t" />

        <MaxWidthWrapper className="grid grid-cols-4 gap-10 pt-8 max-md:px-0">
          <div className="relative col-span-4 mb-10 flex flex-col space-y-8 border-y bg-background md:rounded-xl md:border lg:col-span-3">
            <div className="px-[.8rem] py-10 md:px-8">
              <div className="mdx">
                <MDXContent components={mdxComponents} />
              </div>
            </div>
          </div>

          <div className="sticky top-20 col-span-1 mt-52 hidden flex-col divide-y divide-muted self-start pb-24 lg:flex">
            <DashboardTableOfContents toc={toc} />
          </div>
        </MaxWidthWrapper>
      </div>

      <MaxWidthWrapper>
        {(previousChapter || nextChapter) && (
          <div className="flex flex-col space-y-4 pb-16">
            <p className="font-heading text-2xl text-foreground">Navigation</p>

            <div className="grid grid-cols-1 gap-3 md:grid-cols-2 lg:gap-6">
              {previousChapter && (
                <Link
                  href={`/books/${slug}/${previousChapter.chapterSlug}`}
                  className="flex flex-col space-y-2 rounded-xl border p-5 transition-colors duration-300 hover:bg-muted/80 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
                  aria-label={`Go to previous chapter: ${previousChapter.title}`}
                >
                  <span className="text-sm text-muted-foreground">
                    Previous
                  </span>
                  <h3 className="font-heading text-xl text-foreground">
                    {previousChapter.title}
                  </h3>
                  {previousChapter.description && (
                    <p className="line-clamp-2 text-[15px] text-muted-foreground">
                      {previousChapter.description}
                    </p>
                  )}
                </Link>
              )}
              {nextChapter && (
                <Link
                  href={`/books/${slug}/${nextChapter.chapterSlug}`}
                  className="flex flex-col space-y-2 rounded-xl border p-5 transition-colors duration-300 hover:bg-muted/80 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
                  aria-label={`Go to next chapter: ${nextChapter.title}`}
                >
                  <span className="text-sm text-muted-foreground">Next</span>
                  <h3 className="font-heading text-xl text-foreground">
                    {nextChapter.title}
                  </h3>
                  {nextChapter.description && (
                    <p className="line-clamp-2 text-[15px] text-muted-foreground">
                      {nextChapter.description}
                    </p>
                  )}
                </Link>
              )}
            </div>
          </div>
        )}
      </MaxWidthWrapper>
    </>
  );
}
